<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:context="http://www.springframework.org/schema/context"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans.xsd    
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd    
                        http://www.springframework.org/schema/tx  
						http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
						  
    <!-- 自动扫描 -->  
    <context:component-scan base-package="com.girlgo.cms.service,com.girlgo.cms.dao,com.girlgo.cms.pojo" />
    
    <!-- 引入配置文件 -->  
    <bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>  
  
	<!-- c3p0 -->
	<!--数据库连接 121.40.81.134 localhost:5506-->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="user" value="${username}" />
		<property name="password" value="${password}" />
		<property name="jdbcUrl" value="${url}" />
		<property name="driverClass" value="${driver}" />

		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="AcquireIncrement" value="3" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="AcquireRetryAttempts" value="30" />
		<!--两次连接中间隔时间，单位毫秒。Default: 1000 -->
		<property name="AcquireRetryDelay" value="1000" />
		<!--连接关闭时默认将所有未提交的操作回滚。Default: false -->
		<property name="AutoCommitOnClose" value="false" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default: 
			false -->
		<property name="BreakAfterAcquireFailure" value="false" />
		<!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException,如设为0则无限期等待。单位毫秒。Default: 
			0 -->
		<property name="CheckoutTimeout" value="20000" />
		<property name="Description" value="A pooled c3p0 DataSource" />
		<property name="InitialPoolSize" value="3" />
		<property name="MinPoolSize" value="10" />
		<property name="MaxPoolSize" value="100" />
		<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="MaxIdleTime" value="1800" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 
			0 -->
		<property name="MaxStatements" value="0" />
		<!--定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
		<property name="MaxStatementsPerConnection" value="100" />
		<!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能通过多线程实现多个操作同时被执行。Default: 
			3 -->
		<property name="NumHelperThreads" value="5" />
		<!--通过实现ConnectionTester或QueryConnectionTester的类来测试连接。类名需制定全路径。Default: 
			com.mchange.v2.c3p0.impl.DefaultConnectionTester -->
		<property name="ConnectionTesterClassName"
			value="com.mchange.v2.c3p0.impl.DefaultConnectionTester" />
		<!--每段时间检查所有连接池中的空闲连接。时间为秒，Default: 0 -->
		<property name="IdleConnectionTestPeriod" value="3600" />
		<!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。Default: 
			null -->
		<property name="automaticTestTable" value="C3P0_TEST" />
		<!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false -->
		<property name="TestConnectionOnCheckin" value="true" />
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。Default: 
			false -->
		<property name="TestConnectionOnCheckout" value="false" />
		<!--Strongly disrecommended. Setting this to true may lead to subtle and 
			bizarre bugs.（文档原文）作者强烈建议不使用的一个属性 -->
		<property name="ForceIgnoreUnresolvedTransactions" value="false" />
		<!--早期的c3p0版本对JDBC接口采用动态反射代理。在早期版本用途广泛的情况下这个参数 允许用户恢复到动态反射代理以解决不稳定的故障。最新的非反射代理更快并且已经开始 
			广泛的被使用，所以这个参数未必有用。现在原先的动态反射与新的非反射代理同时受到支持，但今后可能的版本可能不支持动态反射代理。Default: false -->
		<property name="UsesTraditionalReflectiveProxies" value="false" />
	</bean>  
  
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:com/girlgo/cms/dao/mapper/*.xml"></property>  
    </bean>  
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.girlgo.cms.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
    
    <!-- 注解事物 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
  
</beans>  